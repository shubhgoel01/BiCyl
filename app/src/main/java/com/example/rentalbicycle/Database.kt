package com.example.rentalbicycle

import android.util.Log
import android.widget.Toast
import androidx.compose.runtime.Composable
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.auth.ktx.auth
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ktx.database
import com.google.firebase.ktx.Firebase
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import kotlinx.coroutines.withContext

//Only Called Once while creating project to create 'NODE'
@Composable
fun SetDatabase() {

    //BASICALLY THIS SHOULD BE DONE INSIDE VIEW MODEL

    var auth: FirebaseAuth = Firebase.auth
    var database: FirebaseDatabase = Firebase.database

//    addStudent(Student("Akash Dhiman","akash@gmail.com","234ca006","MCA"),database)
    //addStudent(Student("Shubh Goel","shubhgoel@gmail.com","234ca058","MCA", imageURL = "https://firebasestorage.googleapis.com/v0/b/rentalbicycle-53b04.appspot.com/o/Personal.jpg?alt=media&token=836ce8b6-c296-493c-b766-bc8ba24421ca"),database)
//    addCycle(database,"1")
//    addCycle(database,"2")
//    addCycle(database,"3")
    addAdmin(auth,database,adminData("AD01","admin1@gmail.com","12345678"))
}


fun addStudent(student: Student,database:FirebaseDatabase) {
    // Get a reference to the 'students' node
    val refStudents = Firebase.database.reference.child("students")

    // Create a reference for the specific student using their registration number
    val studentRef = refStudents.child(student.registrationNumber)

    // Set the student's data at this reference
    studentRef.setValue(student).addOnSuccessListener {
        // Successfully created the student node
        Log.d("Firebase", "Student added successfully")
    }.addOnFailureListener { e ->
        // Handle failure
        Log.e("Firebase", "Failed to add student", e)
    }
}

fun addCycle(database: FirebaseDatabase,ID:String)
{
    val cycleRef = database.reference.child("Cycle")
    val newCycleRef=cycleRef.push()
    //Basically here we are generating a unique id that can be used as unique-cycle-unit-node-value
    //Basically before what we were doing either we were using student roll number or uid generated by the firebase-authentication,
    //that's why we never used this before, but in case of cycle we have nothing to pass as UID
    CoroutineScope(Dispatchers.IO).launch{
        newCycleRef.setValue(Cycle(CycleId = ID)).await()
        database.reference.child("cycleIdToUId").child(ID).setValue(newCycleRef.key).await()
    }
}

fun addAdmin(auth: FirebaseAuth,database:FirebaseDatabase,newAdmin:adminData)
{
    val cycleRef = database.reference.child("adminData")
    val adminDataRef=cycleRef.child(newAdmin.ID)

    adminDataRef.setValue(newAdmin).addOnSuccessListener {
        Log.d("Admin","Successfully Added Admin")
    }.addOnFailureListener {
        Log.e("Admin","Error Occurred $it")
    }

    CoroutineScope(Dispatchers.IO).launch {
        Log.e("Admin", "Admin email - ${newAdmin.email}")
        try {
            val authResult =
                auth.createUserWithEmailAndPassword(newAdmin.email, newAdmin.password).await()
            if (authResult.user != null) {
                Log.e("Admin", "Admin Register Successful")
                withContext(Dispatchers.Main) {
                    Toast.makeText(
                        auth.app.applicationContext,
                        "User Created Successfully.",
                        Toast.LENGTH_SHORT
                    ).show()
                }
            }
        } catch (e: Exception) {
            Log.e("Admin", "Admin Register Failed")
        }

        if(auth.currentUser!=null)
        {
            val adminRef=database.reference.child("admin").child(auth.currentUser!!.uid)
            adminRef.setValue(admin(newAdmin.ID))
        }

    }
}
